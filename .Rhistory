}
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
heatmaps[1,idx1:idx2] <- x_circle
heatmaps[2,idx1:idx2] <- y_circle
}
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
#  lines(c(shield[j,"x1"],shield[j,"x2"]),c(shield[j,"y1"],shield[j,"y2"]))
}
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seat_locations[j,"x"],seat_locations[j,"y"])
#  lines(c(shield[j,"x1"],shield[j,"x2"]),c(shield[j,"y1"],shield[j,"y2"]))
}
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seat_locations[j,"x"],seat_locations[j,"y"],pch=19)
#  lines(c(shield[j,"x1"],shield[j,"x2"]),c(shield[j,"y1"],shield[j,"y2"]))
}
domain_x <- 20
source('C:/Users/lucy_/covid-recovery/heatmapper.r')
source('C:/Users/lucy_/covid-recovery/heatmapper.r')
shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
shielded_heatmapper <- function(seat_locations,shield_locations,radius,domain_x,domain_y) {
for (j in 1:nrow(seat_locations)) {
shield_interact <- c()
x_circle <- radius*cos(theta) + seat_locations[j,"x"]
y_circle <- radius*sin(theta) + seat_locations[j,"y"]
x_circle[x_circle<0] <- 0
x_circle[x_circle>domain_x] <- domain_x
y_circle[y_circle<0] <- 0
y_circle[y_circle>domain_y] <- domain_y
for (i in 1:nrow(shield)) {
shield_y <- seq(shield[i,3],shield[i,4],length.out=100)
shield_x <- rep(shield[i,1],100)
distance2 <- (shield_x-seat_locations[j,"x"])^2 + (shield_y-seat_locations[j,"y"])^2
if (min(distance2) < radius^2) {
if (shield[i,1] < seat_locations[j,"x"]) {
x_circle[x_circle<shield[i,1] & y_circle < max(shield_y) & y_circle>min(shield_y)] <- shield_x[x_circle < shield[i,1] & y_circle< max(shield_y) & y_circle> min(shield_y)]
}
else {
x_circle[x_circle>shield[i,1] & y_circle < max(shield_y) & y_circle>min(shield_y)] <- shield_x[x_circle > shield[i,1] & y_circle< max(shield_y) & y_circle> min(shield_y)]
}
}
}
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
heatmaps[1,idx1:idx2] <- x_circle
heatmaps[2,idx1:idx2] <- y_circle
}
heatmaps
}
shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seat_locations[j,"x"],seat_locations[j,"y"],pch=19)
#  lines(c(shield[j,"x1"],shield[j,"x2"]),c(shield[j,"y1"],shield[j,"y2"]))
}
source('C:/Users/lucy_/covid-recovery/app/src.R')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
remove_seats_shields <- function(seat_locations,radius,heatmaps) {
accepted_seats <- seat_locations$n
for (i in 1:length(accepted_seats)){
num_to_remove <- c()
if (i <= length(accepted_seats)){
#go through each accepted node and determine if too close
fixed_seat <- seat_locations[accepted_seats[i],]
idx1 <- 1+100*(accepted_seats[i]-1)
idx2 <- 100*(accepted_seats[i]-1) + 100
xp <- heatmaps[1,idx1:idx2]
yp <- heatmaps[2,idx1:idx2]
for (m in accepted_seats[i]:accepted_seats[length(accepted_seats)]){
trial_seat <- seat_locations[m,]
#if too close then a seat number to list
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = FALSE) && fixed_seat$n != trial_seat$n){
num_to_remove <- c(num_to_remove, m)
}
}
#remove the nodes too close from the accepted list
if (length(num_to_remove) > 0) {
for (j in 1:length(accepted_seats)){
for (k in 1:length(num_to_remove)){
if (j  <= length(accepted_seats)){
if (accepted_seats[j] == num_to_remove[k]){
accepted_seats <- accepted_seats[accepted_seats!=num_to_remove[k]]
}
}
}
}
}
}
}
seat_locations[accepted_seats,]
}
seat_locations <- read.csv(file="seat_locations.csv")
seat_locations <- remove_seats(seat_locations,radius)
shield <- read.csv(file="shield_locations.csv")
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
remove_seats_shields <- function(seat_locations,radius,heatmaps)
remove_seats_shields(seat_locations,radius,heatmaps)
install.packages("pracma")
library(pracma)
seat_locations <- read.csv(file="seat_locations.csv")
seat_locations <- remove_seats(seat_locations,radius)
shield <- read.csv(file="shield_locations.csv")
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
remove_seats_shields(seat_locations,radius,heatmaps)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
plot(seats$x,seats$y)
remove_seats_shields <- function(seat_locations,radius,heatmaps) {
accepted_seats <- seat_locations$n
for (i in 1:length(accepted_seats)){
num_to_remove <- c()
if (i <= length(accepted_seats)){
#go through each accepted node and determine if too close
fixed_seat <- seat_locations[accepted_seats[i],]
idx1 <- 1+100*(accepted_seats[i]-1)
idx2 <- 100*(accepted_seats[i]-1) + 100
xp <- heatmaps[1,idx1:idx2]
yp <- heatmaps[2,idx1:idx2]
for (m in accepted_seats[i]:accepted_seats[length(accepted_seats)]){
trial_seat <- seat_locations[m,]
#if too close then a seat number to list
print(inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = FALSE))
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = FALSE) && fixed_seat$n != trial_seat$n){
num_to_remove <- c(num_to_remove, m)
}
}
#remove the nodes too close from the accepted list
if (length(num_to_remove) > 0) {
for (j in 1:length(accepted_seats)){
for (k in 1:length(num_to_remove)){
if (j  <= length(accepted_seats)){
if (accepted_seats[j] == num_to_remove[k]){
accepted_seats <- accepted_seats[accepted_seats!=num_to_remove[k]]
}
}
}
}
}
}
}
seat_locations[accepted_seats,]
}
seat_locations <- read.csv(file="seat_locations.csv")
shield <- read.csv(file="shield_locations.csv")
seat_locations <- remove_seats(seat_locations,radius)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
remove_seats_shields <- function(seat_locations,radius,heatmaps) {
accepted_seats <- seat_locations$n
for (i in 1:length(accepted_seats)){
num_to_remove <- c()
if (i <= length(accepted_seats)){
#go through each accepted node and determine if too close
fixed_seat <- seat_locations[accepted_seats[i],]
idx1 <- 1+100*(accepted_seats[i]-1)
idx2 <- 100*(accepted_seats[i]-1) + 100
xp <- heatmaps[1,idx1:idx2]
yp <- heatmaps[2,idx1:idx2]
for (m in accepted_seats[i]:accepted_seats[length(accepted_seats)]){
trial_seat <- seat_locations[m,]
#if too close then a seat number to list
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = FALSE)) {
print("true")
}
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = FALSE) && fixed_seat$n != trial_seat$n){
num_to_remove <- c(num_to_remove, m)
}
}
#remove the nodes too close from the accepted list
if (length(num_to_remove) > 0) {
for (j in 1:length(accepted_seats)){
for (k in 1:length(num_to_remove)){
if (j  <= length(accepted_seats)){
if (accepted_seats[j] == num_to_remove[k]){
accepted_seats <- accepted_seats[accepted_seats!=num_to_remove[k]]
}
}
}
}
}
}
}
seat_locations[accepted_seats,]
}
seat_locations <- read.csv(file="seat_locations.csv")
seat_locations <- remove_seats(seat_locations,radius)
shield <- read.csv(file="shield_locations.csv")
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
plot(seats$x,seats$y)
radius <- 2
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
plot(seats$x,seats$y)
remove_seats_shields <- function(seat_locations,radius,heatmaps) {
accepted_seats <- seat_locations$n
for (i in 1:length(accepted_seats)){
num_to_remove <- c()
if (i <= length(accepted_seats)){
#go through each accepted node and determine if too close
fixed_seat <- seat_locations[accepted_seats[i],]
idx1 <- 1+100*(accepted_seats[i]-1)
idx2 <- 100*(accepted_seats[i]-1) + 100
xp <- heatmaps[1,idx1:idx2]
yp <- heatmaps[2,idx1:idx2]
for (m in accepted_seats[i]:accepted_seats[length(accepted_seats)]){
trial_seat <- seat_locations[m,]
#if too close then a seat number to list
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = TRUE)) {
print("true")
}
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = TRUE) && fixed_seat$n != trial_seat$n){
num_to_remove <- c(num_to_remove, m)
}
}
#remove the nodes too close from the accepted list
if (length(num_to_remove) > 0) {
for (j in 1:length(accepted_seats)){
for (k in 1:length(num_to_remove)){
if (j  <= length(accepted_seats)){
if (accepted_seats[j] == num_to_remove[k]){
accepted_seats <- accepted_seats[accepted_seats!=num_to_remove[k]]
}
}
}
}
}
}
}
seat_locations[accepted_seats,]
}
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
plot(seats$x,seats$y)
plot(seats$x,seats$y)
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
plot(seats$x,seats$y)
heatmaps
dim(heatmap)
dim(heatmaps)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seatss[j,"x"],seats[j,"y"],pch=19)
}
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
radius <- 1
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
source('C:/Users/lucy_/covid-recovery/app/src.R')
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
dim(heatmaps)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
dim(heatmaps)
seat_locations <- read.csv(file="seat_locations.csv")
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
#seat_locations <- remove_seats(seat_locations,radius)
shield <- read.csv(file="shield_locations.csv")
radius <- 1
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
heatmaps
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
#heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
heatmaps <- heatmapper(seat_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
radius
radius <- 2
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
#heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- heatmapper(seat_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seat_locations)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
radius
seats
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seats) {
idx1 <- 1+100*(j-1)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seats) {
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seats) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in 1:nrow(seats)) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
seats
seats$n
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
print(j)
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats[j,"x"],seats[j,"y"],pch=19)
}
seats
seats[1,"x"]
seats[4,"x"]
seats$x[seats$n==1]
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
print(j)
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats$x[seats$n==j],seats$y[seats$n==j],pch=19)
}
radius <- 3
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- heatmapper(seat_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
print(j)
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats$x[seats$n==j],seats$y[seats$n==j],pch=19)
}
remove_seats_shields <- function(seat_locations,radius,heatmaps) {
accepted_seats <- seat_locations$n
for (i in 1:length(accepted_seats)){
num_to_remove <- c()
if (i <= length(accepted_seats)){
#go through each accepted node and determine if too close
fixed_seat <- seat_locations[accepted_seats[i],]
idx1 <- 1+100*(accepted_seats[i]-1)
idx2 <- 100*(accepted_seats[i]-1) + 100
xp <- heatmaps[1,idx1:idx2]
yp <- heatmaps[2,idx1:idx2]
for (m in accepted_seats[i]:accepted_seats[length(accepted_seats)]){
trial_seat <- seat_locations[m,]
#if too close then a seat number to list
if (inpolygon(trial_seat$x, trial_seat$y, xp, yp, boundary = TRUE) && fixed_seat$n != trial_seat$n){
num_to_remove <- c(num_to_remove, m)
}
}
#remove the nodes too close from the accepted list
if (length(num_to_remove) > 0) {
for (j in 1:length(accepted_seats)){
for (k in 1:length(num_to_remove)){
if (j  <= length(accepted_seats)){
if (accepted_seats[j] == num_to_remove[k]){
accepted_seats <- accepted_seats[accepted_seats!=num_to_remove[k]]
}
}
}
}
}
}
}
seat_locations[accepted_seats,]
}
radius <- 0.5
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- heatmapper(seat_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
print(j)
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats$x[seats$n==j],seats$y[seats$n==j],pch=19)
}
radius <- 0.9
heatmaps <- heatmapper(seat_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- heatmapper(seat_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
print(j)
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats$x[seats$n==j],seats$y[seats$n==j],pch=19)
}
radius <- 2
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius,domain_x,domain_y)
seats <- remove_seats_shields(seat_locations,radius,heatmaps)
heatmaps <- shielded_heatmapper(seat_locations,shield_locations,radius/2,domain_x,domain_y)#heatmapper(seat_locations,radius/2,domain_x,domain_y)
plot(NULL, xlim=c(0,domain_x), ylim=c(0,domain_y), asp=1, axes=FALSE, xlab="", ylab="")
for (j in seats$n) {
print(j)
par(fig=c(0,1,0,1))
idx1 <- 1+100*(j-1)
idx2 <- 100*(j-1) + 100
polygon(x=heatmaps[1,idx1:idx2],y=heatmaps[2,idx1:idx2],col=rgb(1, 0, 0,0.1))
points(seats$x[seats$n==j],seats$y[seats$n==j],pch=19)
}
nrow(seats)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
list <- c("x" = 1, "y" = 1)
list["x"]
list[["x"]]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
list
list[,1]
list[1]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
